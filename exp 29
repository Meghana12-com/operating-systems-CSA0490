#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_READERS 3
#define NUM_WRITERS 2

sem_t mutex, writeMutex;
int shared_data = 0;
int readers_count = 0;

void *reader(void *arg) {
    int reader_id = *((int *)arg);

    while (1) {
        // Entering the critical section for readers
        sem_wait(&mutex);
        readers_count++;

        // If the first reader, lock writeMutex to prevent writers
        if (readers_count == 1) {
            sem_wait(&writeMutex);
        }

        // Exiting the critical section for readers
        sem_post(&mutex);

        // Reading the shared data
        printf("Reader %d reads: %d\n", reader_id, shared_data);

        // Entering the critical section for readers
        sem_wait(&mutex);
        readers_count--;

        // If the last reader, release writeMutex to allow writers
        if (readers_count == 0) {
            sem_post(&writeMutex);
        }

        // Exiting the critical section for readers
        sem_post(&mutex);

        // Simulating some delay for reading
        usleep(100000);
    }

    pthread_exit(NULL);
}

void *writer(void *arg) {
    int writer_id = *((int *)arg);

    while (1) {
        // Lock writeMutex to prevent other writers or readers
        sem_wait(&writeMutex);

        // Writing to the shared data
        shared_data++;
        printf("Writer %d writes: %d\n", writer_id, shared_data);

        // Unlock writeMutex
        sem_post(&writeMutex);

        // Simulating some delay for writing
        usleep(200000);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    int reader_ids[NUM_READERS], writer_ids[NUM_WRITERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&writeMutex, 0, 1);

    // Create reader threads
    for (int i = 0; i < NUM_READERS; ++i) {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; ++i) {
        writer_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Join threads
    for (int i = 0; i < NUM_READERS; ++i) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < NUM_WRITERS; ++i) {
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&writeMutex);

    return 0;
}
