#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000

// Structure to represent a memory block
typedef struct MemoryBlock {
    int start;
    int size;
    int allocated;
} MemoryBlock;

MemoryBlock memory[MEMORY_SIZE];

// Function to initialize the memory block
void initializeMemory() {
    memory[0].start = 0;
    memory[0].size = MEMORY_SIZE;
    memory[0].allocated = 0;
}

// Function to display the memory blocks
void displayMemory() {
    printf("Memory Blocks:\n");
    for (int i = 0; i < MEMORY_SIZE; i++) {
        printf("Block %d: Start = %d, Size = %d, Allocated = %s\n", i + 1, memory[i].start, memory[i].size,
               memory[i].allocated ? "Yes" : "No");
    }
    printf("\n");
}

// Function to allocate memory using worst-fit algorithm
void worstFit(int processSize) {
    int worstFitIndex = -1;
    int maxBlockSize = 0;

    // Find the largest free block
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize && memory[i].size > maxBlockSize) {
            worstFitIndex = i;
            maxBlockSize = memory[i].size;
        }
    }

    if (worstFitIndex != -1) {
        // Allocate memory in the worst-fit block
        memory[worstFitIndex].allocated = 1;

        // If there is remaining space, create a new free block
        if (memory[worstFitIndex].size > processSize) {
            MemoryBlock newBlock;
            newBlock.start = memory[worstFitIndex].start + processSize;
            newBlock.size = memory[worstFitIndex].size - processSize;
            newBlock.allocated = 0;

            // Shift other blocks to make space for the new block
            for (int i = MEMORY_SIZE - 1; i > worstFitIndex; i--) {
                memory[i] = memory[i - 1];
            }

            // Insert the new free block
            memory[worstFitIndex + 1] = newBlock;
        }

        printf("Memory allocated successfully using worst-fit algorithm.\n");
    } else {
        printf("Unable to allocate memory using worst-fit algorithm.\n");
    }
}

int main() {
    initializeMemory();

    // Display initial memory status
    displayMemory();

    // Allocate memory using worst-fit
    worstFit(200);
    worstFit(100);
    worstFit(300);

    // Display final memory status
    displayMemory();

    return 0;
}
