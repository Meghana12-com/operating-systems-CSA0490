#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000

typedef struct MemoryBlock {
    int id;
    int size;
    int allocated;
} MemoryBlock;

// Function declarations
void initializeMemory(MemoryBlock memory[], int size);
void displayMemory(MemoryBlock memory[], int size);
void allocateFirstFit(MemoryBlock memory[], int size, int processId, int processSize);
void allocateBestFit(MemoryBlock memory[], int size, int processId, int processSize);
void allocateWorstFit(MemoryBlock memory[], int size, int processId, int processSize);

int main() {
    MemoryBlock memory[MEMORY_SIZE];

    int choice, processId, processSize;

    initializeMemory(memory, MEMORY_SIZE);

    do {
        printf("\nMemory Allocation Strategies\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Display Memory\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Process ID and Size: ");
                scanf("%d %d", &processId, &processSize);
                allocateFirstFit(memory, MEMORY_SIZE, processId, processSize);
                break;
            case 2:
                printf("Enter Process ID and Size: ");
                scanf("%d %d", &processId, &processSize);
                allocateBestFit(memory, MEMORY_SIZE, processId, processSize);
                break;
            case 3:
                printf("Enter Process ID and Size: ");
                scanf("%d %d", &processId, &processSize);
                allocateWorstFit(memory, MEMORY_SIZE, processId, processSize);
                break;
            case 4:
                displayMemory(memory, MEMORY_SIZE);
                break;
            case 0:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 0);

    return 0;
}

// Function to initialize the memory
void initializeMemory(MemoryBlock memory[], int size) {
    for (int i = 0; i < size; i++) {
        memory[i].id = -1;
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

// Function to display the memory status
void displayMemory(MemoryBlock memory[], int size) {
    printf("\nMemory Status:\n");
    for (int i = 0; i < size; i++) {
        if (memory[i].id != -1) {
            printf("Block %d: Size %d, Allocated: %s, Process ID: %d\n", i + 1, memory[i].size,
                   memory[i].allocated ? "Yes" : "No", memory[i].id);
        } else {
            printf("Block %d: Free\n", i + 1);
        }
    }
}

// Function to allocate memory using First Fit strategy
void allocateFirstFit(MemoryBlock memory[], int size, int processId, int processSize) {
    for (int i = 0; i < size; i++) {
        if (memory[i].allocated == 0 && memory[i].size >= processSize) {
            memory[i].id = processId;
            memory[i].allocated = 1;
            break;
        }
    }
    displayMemory(memory, size);
}

// Function to allocate memory using Best Fit strategy
void allocateBestFit(MemoryBlock memory[], int size, int processId, int processSize) {
    int bestFitIndex = -1;
    int minSize = INT_MAX;

    for (int i = 0; i < size; i++) {
        if (memory[i].allocated == 0 && memory[i].size >= processSize && memory[i].size < minSize) {
            bestFitIndex = i;
            minSize = memory[i].size;
        }
    }

    if (bestFitIndex != -1) {
        memory[bestFitIndex].id = processId;
        memory[bestFitIndex].allocated = 1;
    }

    displayMemory(memory, size);
}

// Function to allocate memory using Worst Fit strategy
void allocateWorstFit(MemoryBlock memory[], int size, int processId, int processSize) {
    int worstFitIndex = -1;
    int maxSize = 0;

    for (int i = 0; i < size; i++) {
        if (memory[i].allocated == 0 && memory[i].size >= processSize && memory[i].size > maxSize) {
            worstFitIndex = i;
            maxSize = memory[i].size;
        }
    }

    if (worstFitIndex != -1) {
        memory[worstFitIndex].id = processId;
        memory[worstFitIndex].allocated = 1;
    }

    displayMemory(memory, size);
}
